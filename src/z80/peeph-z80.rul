/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1,%3\n"
"	ld	%1,%2\n"
"} by {\n"
"	; peephole z0 removed dead load into %1\n"
"	ld	%1,%2\n"
"} if notVolatile(%1 %3), operandsNotSame\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	a,0(%1)\n"
"	ld	%3,a\n"
"	ld	%1,#%5\n"
"} by {\n"
"	ld	a,(#%2)\n"
"	; peephole z1 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	ld	%3,a\n"
"	ld	%1,#%5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	0(%1),a\n"
"%4:\n"
"	ld	%1,%5\n"
"} by {\n"
"	ld	(#%2),a\n"
"	; peephole z2 directly used #%2 instead of going through %1 using indirect addressing.\n"
"%4:\n"
"	ld	%1,%5\n"
"}\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	%1,#%2\n"
"	ld	0(%1),%3\n"
"	ld	%1,#%4\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%2),a\n"
"	; peephole z3 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	pop	af\n"
"	ld	%1,#%4\n"
"} if operandsNotRelated(%3 'a')\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"	ld	bc,#%4 + %5\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2),a\n"
"	; peephole z4 directly used address #%1 + %2 instead of placing it in bc first.\n"
"	ld	bc,#%4 + %5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2 + %6\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"	ld	bc,#%4 + %5\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2 + %6),a\n"
"	; peephole z5 directly used address #%1 + %2 + %6 instead of placing it in bc first.\n"
"	ld	bc,#%4 + %5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"%7:\n"
"	ld	bc,#%4 + %5\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2),a\n"
"	; peephole z6 directly used address #%1 + %2 instead of placing it in bc first.\n"
"%7:\n"
"	ld	bc,#%4 + %5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2 + %6\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"%7:\n"
"	ld	bc,#%4 + %5\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2 + %6),a\n"
"	; peephole z7 directly used address #%1 + %2 + %6 instead of placing it in bc first.\n"
"%7:\n"
"	ld	bc,#%4 + %5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	c,%1\n"
"	ld	l,c\n"
"	ret\n"
"} by {\n"
"	ld	l,%1\n"
"	; peephole z8 moved %1 directly into l instead of going through c.\n"
"	ret\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	b,h\n"
"	ld	c,l\n"
"	pop	af\n"
"	push	bc\n"
"	call	%1\n"
"} by {\n"
"	ex	(sp),hl\n"
"	; peephole z9 moved hl directly to the stack instead of going through bc.\n"
"	call	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	d,h\n"
"	ld	e,l\n"
"	pop	af\n"
"	push	de\n"
"	call	%1\n"
"} by {\n"
"	ex	(sp),hl\n"
"	; peephole z10 moved hl directly to the stack instead of going through de.\n"
"	call	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	ret\n"
"	; peephole z11 replaced jump by return.\n"
"} if labelIsReturnOnly(), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	ret	%1\n"
"	; peephole z11a replaced jump by return.\n"
"} if labelIsReturnOnly(), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole z12 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; peephole z13 removed unused ret.\n"
"}\n"
"\n"
"replace {\n"
"	jp	%5\n"
"} by {\n"
"	jr	%5\n"
"	; peephole z14 changed absolute to relative unconditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	Z,%5\n"
"} by {\n"
"	jr	Z,%5\n"
"	; peephole z15 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	NZ,%5\n"
"} by {\n"
"	jr	NZ,%5\n"
"	; peephole z16 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	C,%5\n"
"} by {\n"
"	jr	C,%5\n"
"	; peephole z17 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	NC,%5\n"
"} by {\n"
"	jr	NC,%5\n"
"	; peephole z18 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
